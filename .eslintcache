[{"/Users/marcoludovicoperego/Documents/projects/my-totem/src/index.js":"1","/Users/marcoludovicoperego/Documents/projects/my-totem/src/holo-material.js":"2","/Users/marcoludovicoperego/Documents/projects/my-totem/src/use-post.js":"3","/Users/marcoludovicoperego/Documents/projects/my-totem/src/store.js":"4"},{"size":7674,"mtime":1610064101553,"results":"5","hashOfConfig":"6"},{"size":3849,"mtime":1610064101413,"results":"7","hashOfConfig":"6"},{"size":1514,"mtime":1610064101681,"results":"8","hashOfConfig":"6"},{"size":146,"mtime":1610042037160,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"w7kxdj",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/Users/marcoludovicoperego/Documents/projects/my-totem/src/index.js",["21"],"/Users/marcoludovicoperego/Documents/projects/my-totem/src/holo-material.js",["22","23"],"import { useTexture } from \"@react-three/drei\";\nimport * as THREE from \"three\";\nimport React, { useEffect, useMemo, useState } from \"react\";\nimport { useFrame } from \"react-three-fiber\";\nimport {\n  RenderPass,\n  SavePass,\n  ChromaticAberrationEffect,\n  GlitchEffect,\n  NoiseEffect,\n  EffectPass,\n  BlurPass,\n  BlendMode,\n} from \"postprocessing\";\nimport { usePipeline } from \"./store\";\n\nclass HoloMaterialImpl extends THREE.MeshPhysicalMaterial {\n  _glitchDiffuse;\n  _time;\n  constructor(parameters = {}) {\n    super(parameters);\n    this.setValues(parameters);\n    this._glitchDiffuse = { value: null };\n    this._time = { value: null };\n  }\n\n  onBeforeCompile(shader) {\n    shader.uniforms.glitchDiffuse = this._glitchDiffuse;\n    shader.uniforms.time = this._time;\n\n    shader.vertexShader = `\n      varying vec2 my_vUv;\n      varying vec3 my_position;\n      ${shader.vertexShader}\n    `;\n    shader.vertexShader = shader.vertexShader.replace(\n      \"#include <project_vertex>\",\n      `\n        #include <project_vertex>\n        my_vUv = uv;\n        my_position = transformed;\n        my_position = normalize(my_position);\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(transformed,1.);\n      `\n    );\n\n    shader.fragmentShader = `\n        uniform sampler2D glitchDiffuse;\n        uniform float time;\n        varying vec2 my_vUv;\n        varying vec3 my_position;\n        ${shader.fragmentShader}\n    `;\n    shader.fragmentShader = shader.fragmentShader.replace(\n      \"#include <map_fragment>\",\n      `\n        #include <map_fragment>\n        vec2 my_uv = fract(vUv - vec2(0., time));\n        vec4 glitch = texture2D(glitchDiffuse, my_uv);\n        diffuseColor.r *= 0.2;\n        diffuseColor.g *= 0.2;\n        diffuseColor.b *= 6.0;\n        diffuseColor.rgb += 0.001 * glitch.r;\n        diffuseColor.a *= 0.2 + smoothstep(0.2,1.0,glitch.r);\n        diffuseColor.a *= smoothstep(0.65, 1.0,  my_position.z);\n      `\n    );\n  }\n\n  get glitchDiffuse() {\n    return this._glitchDiffuse.value;\n  }\n  set glitchDiffuse(v) {\n    this._glitchDiffuse.value = v;\n  }\n  get time() {\n    return this._time.value;\n  }\n  set time(v) {\n    this._time.value = v;\n  }\n}\n\nfunction HoloMaterial(savePass) {\n  return React.forwardRef((props, ref) => {\n    const [material] = useState(() => new HoloMaterialImpl());\n    const textures = useTexture([\"/lol.jpg\", \"/depth.png\"]);\n\n    useFrame((state) => {\n      if (material) {\n        material.time = state.clock.getElapsedTime() / 128;\n      }\n    });\n\n    return (\n      <primitive\n        object={material}\n        ref={ref}\n        attach=\"material\"\n        {...props}\n        transparent\n        map={textures[0]}\n        alphaMap={textures[1]}\n        displacementMap={textures[1]}\n        displacementScale={0.5}\n        glitchDiffuse={savePass.renderTarget.texture}\n      />\n    );\n  });\n}\n\nexport function useHoloMaterial() {\n  const setPipeline = usePipeline((s) => s.setPipeline);\n  const perturbationMap = useTexture(\"/perturbation.jpeg\");\n  const [savePass, pipeline, scene] = useMemo(() => {\n    const GLITCH = new GlitchEffect({\n      perturbationMap,\n      strength: new THREE.Vector2(0.1, 0.1),\n    });\n    const NOISE = new NoiseEffect({\n      blendFunction: BlendMode.COLOR_DODGE,\n    });\n    NOISE.blendMode.opacity.value = 0.05;\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera();\n    scene.background = new THREE.Color(0xffffff);\n    const renderPass = new RenderPass(scene, camera);\n    const glitchPass = new EffectPass(camera, GLITCH, NOISE);\n    const savePass = new SavePass();\n\n    return [savePass, [renderPass, glitchPass, savePass], scene];\n  }, [perturbationMap]);\n\n  useEffect(() => setPipeline(pipeline), [pipeline, setPipeline]);\n  const Material = useMemo(() => HoloMaterial(savePass), [savePass]);\n\n  return [Material, scene];\n}\n","/Users/marcoludovicoperego/Documents/projects/my-totem/src/use-post.js",["24","25"],"import { useFrame, useThree } from \"react-three-fiber\";\nimport * as THREE from \"three\";\nimport { useEffect, useMemo } from \"react\";\nimport {\n  EffectComposer,\n  RenderPass,\n  EffectPass,\n  BloomEffect,\n  BlendFunction,\n  OverrideMaterialManager,\n  ChromaticAberrationEffect,\n  NoiseEffect,\n} from \"postprocessing\";\nimport { usePipeline } from \"./store\";\n\nfunction usePostprocessing(scene, camera) {\n  const { gl, size } = useThree();\n  const pipeline = usePipeline((s) => s.pipeline);\n\n  const [composer] = useMemo(() => {\n    OverrideMaterialManager.workaroundEnabled = true;\n    const composer = new EffectComposer(gl, {\n      frameBufferType: THREE.HalfFloatType,\n      multisampling: 0,\n    });\n    const renderPass = new RenderPass(scene, camera);\n\n    const BLOOM = new BloomEffect({\n      luminanceThreshold: 0.05,\n      luminanceSmoothing: 0.01,\n    });\n    const CHROMATIC_ABERRATION = new ChromaticAberrationEffect({\n      offset: new THREE.Vector2(0.0, 0.002),\n    });\n\n    const effectPass = new EffectPass(camera, BLOOM);\n    const effectPass2 = new EffectPass(camera, CHROMATIC_ABERRATION);\n\n    pipeline.forEach((x) => composer.addPass(x));\n    composer.addPass(renderPass);\n    composer.addPass(effectPass);\n    composer.addPass(effectPass2);\n    return [composer];\n  }, [gl, scene, camera, pipeline]);\n\n  useEffect(() => void composer.setSize(size.width, size.height), [\n    composer,\n    size,\n  ]);\n\n  useFrame((_, delta) => void composer.render(delta), 1);\n}\n\nexport default usePostprocessing;\n",["26","27"],"/Users/marcoludovicoperego/Documents/projects/my-totem/src/store.js",[],{"ruleId":"28","severity":1,"message":"29","line":73,"column":10,"nodeType":"30","messageId":"31","endLine":73,"endColumn":16},{"ruleId":"28","severity":1,"message":"32","line":8,"column":3,"nodeType":"30","messageId":"31","endLine":8,"endColumn":28},{"ruleId":"28","severity":1,"message":"33","line":12,"column":3,"nodeType":"30","messageId":"31","endLine":12,"endColumn":11},{"ruleId":"28","severity":1,"message":"34","line":9,"column":3,"nodeType":"30","messageId":"31","endLine":9,"endColumn":16},{"ruleId":"28","severity":1,"message":"35","line":12,"column":3,"nodeType":"30","messageId":"31","endLine":12,"endColumn":14},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},"no-unused-vars","'normal' is assigned a value but never used.","Identifier","unusedVar","'ChromaticAberrationEffect' is defined but never used.","'BlurPass' is defined but never used.","'BlendFunction' is defined but never used.","'NoiseEffect' is defined but never used.","no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-global-assign","no-unsafe-negation"]